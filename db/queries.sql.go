// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const GetMembersFullJoin = `-- name: GetMembersFullJoin :many
SELECT 
    m.member_id,
    m.name,
    p.prefecture_name
FROM members m
LEFT JOIN prefectures p ON m.prefecture_id = p.prefecture_id
UNION
SELECT 
    m.member_id,
    m.name,
    p.prefecture_name
FROM members m
RIGHT JOIN prefectures p ON m.prefecture_id = p.prefecture_id
WHERE m.member_id IS NULL
`

type GetMembersFullJoinRow struct {
	MemberID       int32          `json:"member_id"`
	Name           string         `json:"name"`
	PrefectureName sql.NullString `json:"prefecture_name"`
}

func (q *Queries) GetMembersFullJoin(ctx context.Context) ([]GetMembersFullJoinRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMembersFullJoin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersFullJoinRow{}
	for rows.Next() {
		var i GetMembersFullJoinRow
		if err := rows.Scan(&i.MemberID, &i.Name, &i.PrefectureName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMembersInnerJoin = `-- name: GetMembersInnerJoin :many
SELECT 
    m.member_id,
    m.name,
    p.prefecture_name
FROM members m
INNER JOIN prefectures p ON m.prefecture_id = p.prefecture_id
`

type GetMembersInnerJoinRow struct {
	MemberID       int32  `json:"member_id"`
	Name           string `json:"name"`
	PrefectureName string `json:"prefecture_name"`
}

func (q *Queries) GetMembersInnerJoin(ctx context.Context) ([]GetMembersInnerJoinRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMembersInnerJoin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersInnerJoinRow{}
	for rows.Next() {
		var i GetMembersInnerJoinRow
		if err := rows.Scan(&i.MemberID, &i.Name, &i.PrefectureName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMembersLeftJoin = `-- name: GetMembersLeftJoin :many
SELECT 
    m.member_id,
    m.name,
    p.prefecture_name
FROM members m
LEFT JOIN prefectures p ON m.prefecture_id = p.prefecture_id
`

type GetMembersLeftJoinRow struct {
	MemberID       int32          `json:"member_id"`
	Name           string         `json:"name"`
	PrefectureName sql.NullString `json:"prefecture_name"`
}

func (q *Queries) GetMembersLeftJoin(ctx context.Context) ([]GetMembersLeftJoinRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMembersLeftJoin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersLeftJoinRow{}
	for rows.Next() {
		var i GetMembersLeftJoinRow
		if err := rows.Scan(&i.MemberID, &i.Name, &i.PrefectureName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMembersRightJoin = `-- name: GetMembersRightJoin :many
SELECT 
    m.member_id,
    m.name,
    p.prefecture_name
FROM members m
RIGHT JOIN prefectures p ON m.prefecture_id = p.prefecture_id
`

type GetMembersRightJoinRow struct {
	MemberID       sql.NullInt32  `json:"member_id"`
	Name           sql.NullString `json:"name"`
	PrefectureName string         `json:"prefecture_name"`
}

func (q *Queries) GetMembersRightJoin(ctx context.Context) ([]GetMembersRightJoinRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMembersRightJoin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersRightJoinRow{}
	for rows.Next() {
		var i GetMembersRightJoinRow
		if err := rows.Scan(&i.MemberID, &i.Name, &i.PrefectureName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
